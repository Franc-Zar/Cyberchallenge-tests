#include <iostream>
using namespace std;

int N, M;
int main()
{

	std::cin >> N >> M;

	int sample_id, rep;
	char dir;
	int err[M];
	char mtrx[N][N];

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			cin >> mtrx[i][j];
	}

	for (int i = 0; i < M; i++)
	{
		cin >> sample_id >> dir >> rep;
		int riga, colonna;
		char find = '*';

		if (rep < 1)
			err[i] = 1;

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				if (mtrx[i][j] == (char)'0' + sample_id)
				{
					riga = i;
					colonna = j;
					find = mtrx[i][j];
				}
			}
		}

		if (find == '*')
			err[i] = 2;
		else
		{
			switch (dir)
			{

			case 'U':
				if (riga - rep < 0)
					err[i] = 4;
				for (int k = 1; k <= rep; k++)
				{
					if (mtrx[riga - k][colonna] != '.')
						err[i] = 3;
				}

				if (err[i] != 4 && err[i] != 3 && err[i] != 2 && err[i] != 1)
				{
					mtrx[riga - rep][colonna] = find;
					mtrx[riga][colonna] = '.';
					err[i] = 0;
				}

				break;

			case 'D':
				if (riga + rep > N)
					err[i] = 4;
				for (int k = 1; k <= rep; k++)
				{
					if (mtrx[riga + k][colonna] != '.')
						err[i] = 3;
				}
				if (err[i] != 4 && err[i] != 3 && err[i] != 2 && err[i] != 1)
				{
					mtrx[riga + rep][colonna] = find;
					mtrx[riga][colonna] = '.';
					err[i] = 0;
				}
				break;

			case 'L':
				if (colonna - rep > 0)
					err[i] = 4;
				for (int k = 1; k <= rep; k++)
				{
					if (mtrx[riga][colonna - k] != '.')
						err[i] = 3;
				}

				if (err[i] != 4 && err[i] != 3 && err[i] != 2 && err[i] != 1)
				{
					mtrx[riga][colonna - rep] = find;
					mtrx[riga][colonna] = '.';
					err[i] = 0;
				}

				break;
			case 'R':
				if (colonna + rep > N)
					err[i] = 4;
				for (int k = 1; k <= rep; k++)
				{
					if (mtrx[riga][colonna + k] != '.')
						err[i] = 3;
				}
				if (err[i] != 4 && err[i] != 3 && err[i] != 2 && err[i] != 1)
				{
					mtrx[riga][colonna + rep] = find;
					mtrx[riga][colonna] = '.';
					err[i] = 0;
				}

				break;
			}
		}
	}

	//output : error codes +  nuova matrice

	for (int i = 0; i < M; i++)
		cout << err[i] << endl;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			cout << mtrx[i][j] << " ";
			if (j == N - 1)
				cout << endl;
		}

	return 0;
}
